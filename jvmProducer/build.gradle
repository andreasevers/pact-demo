buildscript {
  ext {
    springBootVersion = '2.2.5.RELEASE'
  }
  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
    id "au.com.dius.pact" version "3.4.0"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

springBoot  {
    buildInfo()
}

gitProperties {
    gitRepositoryRoot = new File("${project.rootDir}/..")
}

jar {
  baseName = 'pact-demo'
  version = '0.0.1-SNAPSHOT'
    manifest {
        attributes 'Implementation-Title': 'Pact Demo',
                'Implementation-Version': version
    }

}

sourceCompatibility = 1.12
targetCompatibility = 1.12

repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}


dependencies {
  implementation 'org.springframework.boot:spring-boot-starter'
  implementation('org.springframework.boot:spring-boot-starter-actuator')
  implementation('org.projectlombok:lombok')
  implementation('org.springframework.boot:spring-boot-starter-web')
  implementation('org.springframework.boot:spring-boot-starter-amqp')
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testCompile('au.com.dius:pact-jvm-consumer-junit_2.11:3.5.10')
  testCompile('au.com.dius:pact-jvm-provider-spring_2.11:3.5.10')
  testCompile('io.rest-assured:rest-assured:3.0.0')
}

test {
  useJUnitPlatform()
}

pact {

    serviceProviders {
        provider1 {
//            publishVerificationResults = true
            // Only load the pacts from the broker if the start tasks from the command line include pactVerify
            if ('pactVerify' in gradle.startParameter.taskNames) {
                hasPactsFromPactBroker('http://localhost', authentication: ['Basic', 'shanelee007', 'password123']) { consumer ->
                    stateChange = { providerState -> /* state change code here */ true }
                }
            }
        }
    }

    reports {
        defaultReports() // adds the standard console output

        markdown // report in markdown format
        json // report in json format
    }

}
